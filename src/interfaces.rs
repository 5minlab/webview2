// Generated by idl2rs.

/// Wrapper for `ICoreWebView2`.
#[derive(Clone)]
pub struct WebView {
    inner: ComRc<dyn ICoreWebView2>,
}
impl From<ComRc<dyn ICoreWebView2>> for WebView {
    fn from(inner: ComRc<dyn ICoreWebView2>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for WebView {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("WebView").finish()
    }
}
impl WebView {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2Controller`.
#[derive(Clone)]
pub struct Controller {
    inner: ComRc<dyn ICoreWebView2Controller>,
}
impl From<ComRc<dyn ICoreWebView2Controller>> for Controller {
    fn from(inner: ComRc<dyn ICoreWebView2Controller>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for Controller {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Controller").finish()
    }
}
impl Controller {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2Controller> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2Controller> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2Deferral`.
#[derive(Clone)]
pub struct Deferral {
    inner: ComRc<dyn ICoreWebView2Deferral>,
}
impl From<ComRc<dyn ICoreWebView2Deferral>> for Deferral {
    fn from(inner: ComRc<dyn ICoreWebView2Deferral>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for Deferral {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Deferral").finish()
    }
}
impl Deferral {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2Deferral> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2Deferral> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2Settings`.
#[derive(Clone)]
pub struct Settings {
    inner: ComRc<dyn ICoreWebView2Settings>,
}
impl From<ComRc<dyn ICoreWebView2Settings>> for Settings {
    fn from(inner: ComRc<dyn ICoreWebView2Settings>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for Settings {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Settings").finish()
    }
}
impl Settings {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2Settings> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2Settings> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2ProcessFailedEventArgs`.
#[derive(Clone)]
pub struct ProcessFailedEventArgs {
    inner: ComRc<dyn ICoreWebView2ProcessFailedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2ProcessFailedEventArgs>> for ProcessFailedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2ProcessFailedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for ProcessFailedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("ProcessFailedEventArgs").finish()
    }
}
impl ProcessFailedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2ProcessFailedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2ProcessFailedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2HttpHeadersCollectionIterator`.
#[derive(Clone)]
pub struct HttpHeadersCollectionIterator {
    inner: ComRc<dyn ICoreWebView2HttpHeadersCollectionIterator>,
}
impl From<ComRc<dyn ICoreWebView2HttpHeadersCollectionIterator>> for HttpHeadersCollectionIterator {
    fn from(inner: ComRc<dyn ICoreWebView2HttpHeadersCollectionIterator>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for HttpHeadersCollectionIterator {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("HttpHeadersCollectionIterator").finish()
    }
}
impl HttpHeadersCollectionIterator {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2HttpHeadersCollectionIterator> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2HttpHeadersCollectionIterator> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2HttpRequestHeaders`.
#[derive(Clone)]
pub struct HttpRequestHeaders {
    inner: ComRc<dyn ICoreWebView2HttpRequestHeaders>,
}
impl From<ComRc<dyn ICoreWebView2HttpRequestHeaders>> for HttpRequestHeaders {
    fn from(inner: ComRc<dyn ICoreWebView2HttpRequestHeaders>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for HttpRequestHeaders {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("HttpRequestHeaders").finish()
    }
}
impl HttpRequestHeaders {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2HttpRequestHeaders> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2HttpRequestHeaders> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2HttpResponseHeaders`.
#[derive(Clone)]
pub struct HttpResponseHeaders {
    inner: ComRc<dyn ICoreWebView2HttpResponseHeaders>,
}
impl From<ComRc<dyn ICoreWebView2HttpResponseHeaders>> for HttpResponseHeaders {
    fn from(inner: ComRc<dyn ICoreWebView2HttpResponseHeaders>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for HttpResponseHeaders {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("HttpResponseHeaders").finish()
    }
}
impl HttpResponseHeaders {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2HttpResponseHeaders> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2HttpResponseHeaders> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2WebResourceRequest`.
#[derive(Clone)]
pub struct WebResourceRequest {
    inner: ComRc<dyn ICoreWebView2WebResourceRequest>,
}
impl From<ComRc<dyn ICoreWebView2WebResourceRequest>> for WebResourceRequest {
    fn from(inner: ComRc<dyn ICoreWebView2WebResourceRequest>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for WebResourceRequest {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("WebResourceRequest").finish()
    }
}
impl WebResourceRequest {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2WebResourceRequest> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2WebResourceRequest> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2WebResourceResponse`.
#[derive(Clone)]
pub struct WebResourceResponse {
    inner: ComRc<dyn ICoreWebView2WebResourceResponse>,
}
impl From<ComRc<dyn ICoreWebView2WebResourceResponse>> for WebResourceResponse {
    fn from(inner: ComRc<dyn ICoreWebView2WebResourceResponse>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for WebResourceResponse {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("WebResourceResponse").finish()
    }
}
impl WebResourceResponse {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2WebResourceResponse> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2WebResourceResponse> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2NavigationStartingEventArgs`.
#[derive(Clone)]
pub struct NavigationStartingEventArgs {
    inner: ComRc<dyn ICoreWebView2NavigationStartingEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2NavigationStartingEventArgs>> for NavigationStartingEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2NavigationStartingEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for NavigationStartingEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("NavigationStartingEventArgs").finish()
    }
}
impl NavigationStartingEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2NavigationStartingEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2NavigationStartingEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2ContentLoadingEventArgs`.
#[derive(Clone)]
pub struct ContentLoadingEventArgs {
    inner: ComRc<dyn ICoreWebView2ContentLoadingEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2ContentLoadingEventArgs>> for ContentLoadingEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2ContentLoadingEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for ContentLoadingEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("ContentLoadingEventArgs").finish()
    }
}
impl ContentLoadingEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2ContentLoadingEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2ContentLoadingEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2SourceChangedEventArgs`.
#[derive(Clone)]
pub struct SourceChangedEventArgs {
    inner: ComRc<dyn ICoreWebView2SourceChangedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2SourceChangedEventArgs>> for SourceChangedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2SourceChangedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for SourceChangedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("SourceChangedEventArgs").finish()
    }
}
impl SourceChangedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2SourceChangedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2SourceChangedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2ScriptDialogOpeningEventArgs`.
#[derive(Clone)]
pub struct ScriptDialogOpeningEventArgs {
    inner: ComRc<dyn ICoreWebView2ScriptDialogOpeningEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2ScriptDialogOpeningEventArgs>> for ScriptDialogOpeningEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2ScriptDialogOpeningEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for ScriptDialogOpeningEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("ScriptDialogOpeningEventArgs").finish()
    }
}
impl ScriptDialogOpeningEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2ScriptDialogOpeningEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2ScriptDialogOpeningEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2NavigationCompletedEventArgs`.
#[derive(Clone)]
pub struct NavigationCompletedEventArgs {
    inner: ComRc<dyn ICoreWebView2NavigationCompletedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2NavigationCompletedEventArgs>> for NavigationCompletedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2NavigationCompletedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for NavigationCompletedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("NavigationCompletedEventArgs").finish()
    }
}
impl NavigationCompletedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2NavigationCompletedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2NavigationCompletedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2PermissionRequestedEventArgs`.
#[derive(Clone)]
pub struct PermissionRequestedEventArgs {
    inner: ComRc<dyn ICoreWebView2PermissionRequestedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2PermissionRequestedEventArgs>> for PermissionRequestedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2PermissionRequestedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for PermissionRequestedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("PermissionRequestedEventArgs").finish()
    }
}
impl PermissionRequestedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2PermissionRequestedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2PermissionRequestedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2WebResourceRequestedEventArgs`.
#[derive(Clone)]
pub struct WebResourceRequestedEventArgs {
    inner: ComRc<dyn ICoreWebView2WebResourceRequestedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2WebResourceRequestedEventArgs>> for WebResourceRequestedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2WebResourceRequestedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for WebResourceRequestedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("WebResourceRequestedEventArgs").finish()
    }
}
impl WebResourceRequestedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2WebResourceRequestedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2WebResourceRequestedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2MoveFocusRequestedEventArgs`.
#[derive(Clone)]
pub struct MoveFocusRequestedEventArgs {
    inner: ComRc<dyn ICoreWebView2MoveFocusRequestedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2MoveFocusRequestedEventArgs>> for MoveFocusRequestedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2MoveFocusRequestedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for MoveFocusRequestedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("MoveFocusRequestedEventArgs").finish()
    }
}
impl MoveFocusRequestedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2MoveFocusRequestedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2MoveFocusRequestedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2WebMessageReceivedEventArgs`.
#[derive(Clone)]
pub struct WebMessageReceivedEventArgs {
    inner: ComRc<dyn ICoreWebView2WebMessageReceivedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2WebMessageReceivedEventArgs>> for WebMessageReceivedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2WebMessageReceivedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for WebMessageReceivedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("WebMessageReceivedEventArgs").finish()
    }
}
impl WebMessageReceivedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2WebMessageReceivedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2WebMessageReceivedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2DevToolsProtocolEventReceivedEventArgs`.
#[derive(Clone)]
pub struct DevToolsProtocolEventReceivedEventArgs {
    inner: ComRc<dyn ICoreWebView2DevToolsProtocolEventReceivedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2DevToolsProtocolEventReceivedEventArgs>>
    for DevToolsProtocolEventReceivedEventArgs
{
    fn from(inner: ComRc<dyn ICoreWebView2DevToolsProtocolEventReceivedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for DevToolsProtocolEventReceivedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("DevToolsProtocolEventReceivedEventArgs")
            .finish()
    }
}
impl DevToolsProtocolEventReceivedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2DevToolsProtocolEventReceivedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2DevToolsProtocolEventReceivedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2NewWindowRequestedEventArgs`.
#[derive(Clone)]
pub struct NewWindowRequestedEventArgs {
    inner: ComRc<dyn ICoreWebView2NewWindowRequestedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2NewWindowRequestedEventArgs>> for NewWindowRequestedEventArgs {
    fn from(inner: ComRc<dyn ICoreWebView2NewWindowRequestedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for NewWindowRequestedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("NewWindowRequestedEventArgs").finish()
    }
}
impl NewWindowRequestedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2NewWindowRequestedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2NewWindowRequestedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2AcceleratorKeyPressedEventArgs`.
#[derive(Clone)]
pub struct AcceleratorKeyPressedEventArgs {
    inner: ComRc<dyn ICoreWebView2AcceleratorKeyPressedEventArgs>,
}
impl From<ComRc<dyn ICoreWebView2AcceleratorKeyPressedEventArgs>>
    for AcceleratorKeyPressedEventArgs
{
    fn from(inner: ComRc<dyn ICoreWebView2AcceleratorKeyPressedEventArgs>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for AcceleratorKeyPressedEventArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("AcceleratorKeyPressedEventArgs").finish()
    }
}
impl AcceleratorKeyPressedEventArgs {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2AcceleratorKeyPressedEventArgs> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2AcceleratorKeyPressedEventArgs> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2Environment`.
#[derive(Clone)]
pub struct Environment {
    inner: ComRc<dyn ICoreWebView2Environment>,
}
impl From<ComRc<dyn ICoreWebView2Environment>> for Environment {
    fn from(inner: ComRc<dyn ICoreWebView2Environment>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for Environment {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Environment").finish()
    }
}
impl Environment {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2Environment> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2Environment> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2EnvironmentOptions`.
#[derive(Clone)]
pub struct EnvironmentOptions {
    inner: ComRc<dyn ICoreWebView2EnvironmentOptions>,
}
impl From<ComRc<dyn ICoreWebView2EnvironmentOptions>> for EnvironmentOptions {
    fn from(inner: ComRc<dyn ICoreWebView2EnvironmentOptions>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for EnvironmentOptions {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("EnvironmentOptions").finish()
    }
}
impl EnvironmentOptions {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2EnvironmentOptions> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2EnvironmentOptions> {
        &self.inner
    }
}

/// Wrapper for `ICoreWebView2DevToolsProtocolEventReceiver`.
#[derive(Clone)]
pub struct DevToolsProtocolEventReceiver {
    inner: ComRc<dyn ICoreWebView2DevToolsProtocolEventReceiver>,
}
impl From<ComRc<dyn ICoreWebView2DevToolsProtocolEventReceiver>> for DevToolsProtocolEventReceiver {
    fn from(inner: ComRc<dyn ICoreWebView2DevToolsProtocolEventReceiver>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for DevToolsProtocolEventReceiver {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("DevToolsProtocolEventReceiver").finish()
    }
}
impl DevToolsProtocolEventReceiver {
    pub fn into_inner(self) -> ComRc<dyn ICoreWebView2DevToolsProtocolEventReceiver> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn ICoreWebView2DevToolsProtocolEventReceiver> {
        &self.inner
    }
}

/// Wrapper for `IStream`.
#[derive(Clone)]
pub struct Stream {
    inner: ComRc<dyn IStream>,
}
impl From<ComRc<dyn IStream>> for Stream {
    fn from(inner: ComRc<dyn IStream>) -> Self {
        Self { inner }
    }
}
impl fmt::Debug for Stream {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Stream").finish()
    }
}
impl Stream {
    pub fn into_inner(self) -> ComRc<dyn IStream> {
        self.inner
    }
    pub fn as_inner(&self) -> &ComRc<dyn IStream> {
        &self.inner
    }
}
